"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  Promise
} = Util;

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Logger = require('winston/lib/winston/logger');

const Runable = T => {
  var _temp;

  return _temp = class extends T {
    constructor(name, options) {
      super(name, {
        logger: {
          "useMetaKey": "metadata",
          "level": "info",
          "transports": [{
            "type": "console",
            "options": {
              "format": winston.format.combine(winston.format.colorize(), winston.format.simple())
            }
          }],
          ...(options && options.logger)
        },
        ..._.omit(options, ['logger'])
      });

      this._onUncaughtException = err => {
        let waitForLogging = setTimeout(() => {
          process.exit(1);
        }, 1000);
        this.log('error', err, () => {
          clearTimeout(waitForLogging);
          process.exit(1);
        });
      };

      this._onWarning = warning => {
        this.log('warn', warning);
      };

      this._onExit = code => {
        if (this.started) {
          this.stop_().catch(this.logError);
        }
      };
    }

    async start_() {
      this._initialize();

      process.on('exit', this._onExit);
      return super.start_();
    }

    async stop_() {
      process.removeListener('exit', this._onExit);
      await super.stop_();
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          this._uninitialize();

          resolve(this);
        }, 0);
      });
    }

    replaceLogger(logger) {
      this._injectLogger(true);

      this.logger = logger;
      this._externalLogger = true;
      this.log('verbose', 'A new logger attached.');
    }

    _initialize() {
      this._pwd = process.cwd();

      if (this.workingPath !== this._pwd) {
        process.chdir(this.workingPath);
      }

      this._injectLogger();

      this._injectErrorHandlers();
    }

    _uninitialize() {
      const detach = true;

      this._injectErrorHandlers(detach);

      this._injectLogger(detach);

      process.chdir(this._pwd);
      delete this._pwd;
    }

    _injectLogger(detach) {
      if (detach) {
        this.log('verbose', 'Logger is detaching ...');

        if (this._externalLogger) {
          delete this._externalLogger;
        } else {
          this.logger.close();
        }

        delete this.logger;
        return;
      }

      let loggerOpt = this.options.logger;

      if (loggerOpt instanceof Logger) {
        this.logger = loggerOpt;
        this._externalLogger = true;
      } else {
        if (loggerOpt.transports) {
          loggerOpt.transports = winstonFlight(winston, loggerOpt.transports);
        }

        this.logger = winston.createLogger(loggerOpt);
      }

      this.log('verbose', 'Logger injected.');
    }

    _injectErrorHandlers(detach) {
      if (detach) {
        this.log('verbose', 'Process-wide error handlers are detaching ...');
        process.removeListener('warning', this._onWarning);
        process.removeListener('uncaughtException', this._onUncaughtException);
        return;
      }

      process.on('uncaughtException', this._onUncaughtException);
      process.on('warning', this._onWarning);
      this.log('verbose', 'Process-wide error handlers injected.');
    }

  }, _temp;
};

module.exports = Runable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9SdW5hYmxlLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsIlByb21pc2UiLCJ3aW5zdG9uIiwid2luc3RvbkZsaWdodCIsIkxvZ2dlciIsIlJ1bmFibGUiLCJUIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib3B0aW9ucyIsImxvZ2dlciIsImZvcm1hdCIsImNvbWJpbmUiLCJjb2xvcml6ZSIsInNpbXBsZSIsIm9taXQiLCJfb25VbmNhdWdodEV4Y2VwdGlvbiIsImVyciIsIndhaXRGb3JMb2dnaW5nIiwic2V0VGltZW91dCIsInByb2Nlc3MiLCJleGl0IiwibG9nIiwiY2xlYXJUaW1lb3V0IiwiX29uV2FybmluZyIsIndhcm5pbmciLCJfb25FeGl0IiwiY29kZSIsInN0YXJ0ZWQiLCJzdG9wXyIsImNhdGNoIiwibG9nRXJyb3IiLCJzdGFydF8iLCJfaW5pdGlhbGl6ZSIsIm9uIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXNvbHZlIiwicmVqZWN0IiwiX3VuaW5pdGlhbGl6ZSIsInJlcGxhY2VMb2dnZXIiLCJfaW5qZWN0TG9nZ2VyIiwiX2V4dGVybmFsTG9nZ2VyIiwiX3B3ZCIsImN3ZCIsIndvcmtpbmdQYXRoIiwiY2hkaXIiLCJfaW5qZWN0RXJyb3JIYW5kbGVycyIsImRldGFjaCIsImNsb3NlIiwibG9nZ2VyT3B0IiwidHJhbnNwb3J0cyIsImNyZWF0ZUxvZ2dlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFpQkgsSUFBdkI7O0FBRUEsTUFBTUksT0FBTyxHQUFHSCxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUNBLE1BQU1LLE1BQU0sR0FBR0wsT0FBTyxDQUFD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RixRQUFBQSxPQUFPLENBQUNlLGNBQVIsQ0FBdUIsU0FBdkIsRUFBa0MsS0FBS1gsVUFBdkM7QUFDQUosUUFBQUEsT0FBTyxDQUFDZSxjQUFSLENBQXVCLG1CQUF2QixFQUE0QyxLQUFLbkIsb0JBQWpEO0FBQ0E7QUFDSDs7QUFFREksTUFBQUEsT0FBTyxDQUFDYyxFQUFSLENBQVcsbUJBQVgsRUFBZ0MsS0FBS2xCLG9CQUFyQztBQUNBSSxNQUFBQSxPQUFPLENBQUNjLEVBQVIsQ0FBVyxTQUFYLEVBQXNCLEtBQUtWLFVBQTNCO0FBQ0EsV0FBS0YsR0FBTCxDQUFTLFNBQVQsRUFBb0IsdUNBQXBCO0FBQ0g7O0FBdkpnQyxHQUFwQjtBQUFBLENBQWpCOztBQTBKQThCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhELE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBQcm9taXNlIH0gPSBVdGlsO1xuXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuY29uc3Qgd2luc3RvbkZsaWdodCA9IHJlcXVpcmUoJ3dpbnN0b25mbGlnaHQnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJ3dpbnN0b24vbGliL3dpbnN0b24vbG9nZ2VyJyk7XG5cbi8qKlxuICogUnVuYWJsZSBhcHAgbWl4aW4uIFxuICogQHBhcmFtIHtvYmplY3R9IFQgLSBCYXNlIGNsYXNzLiAgICAgXG4gKiBAcmV0dXJucyB7UnVuYWJsZX0gQSBydW5hYmxlIGFwcCBjbGFzcy5cbiAqIEBjb25zdHJ1Y3RzIFJ1bmFibGUoVClcbiAqL1xuY29uc3QgUnVuYWJsZSA9IFQgPT4gY2xhc3MgZXh0ZW5kcyBUIHtcbiAgICBfb25VbmNhdWdodEV4Y2VwdGlvbiA9IGVyciA9PiB7XG4gICAgICAgIGxldCB3YWl0Rm9yTG9nZ2luZyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICB0aGlzLmxvZygnZXJyb3InLCBlcnIsICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh3YWl0Rm9yTG9nZ2luZyk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH0pO1xuICAgIH07ICAgICAgICBcblxuICAgIF9vbldhcm5pbmcgPSB3YXJuaW5nID0+IHtcbiAgICAgICAgdGhpcy5sb2coJ3dhcm4nLCB3YXJuaW5nKTsgICBcbiAgICB9O1xuXG4gICAgX29uRXhpdCA9IGNvZGUgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BfKCkuY2F0Y2godGhpcy5sb2dFcnJvcik7XG4gICAgICAgIH0gICAgICAgICAgIFxuICAgIH07XG5cbiAgICAvKiogICAgICAgICAgICAgICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uLiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIEFwcGxpY2F0aW9uIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9ucy5sb2dnZXJdIC0gTG9nZ2VyIG9wdGlvbnMgICAgXG4gICAgICogQGNvbnN0cnVjdHMgUnVuYWJsZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmFtZSwge1xuICAgICAgICAgICAgbG9nZ2VyOiB7XG4gICAgICAgICAgICAgICAgXCJ1c2VNZXRhS2V5XCI6IFwibWV0YWRhdGFcIixcbiAgICAgICAgICAgICAgICBcImxldmVsXCI6IFwiaW5mb1wiLFxuICAgICAgICAgICAgICAgIFwidHJhbnNwb3J0c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbnNvbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUod2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSwgd2luc3Rvbi5mb3JtYXQuc2ltcGxlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMubG9nZ2VyKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLl8ub21pdChvcHRpb25zLCBbJ2xvZ2dlciddKVxuICAgICAgICB9KTsgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBhcHAgICAgIFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqIEBtZW1iZXJvZiBSdW5hYmxlXG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRfKCkgeyAgICAgICAgXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcblxuICAgICAgICBwcm9jZXNzLm9uKCdleGl0JywgdGhpcy5fb25FeGl0KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci5zdGFydF8oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBhcHBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKiBAbWVtYmVyb2YgUnVuYWJsZVxuICAgICAqL1xuICAgIGFzeW5jIHN0b3BfKCkge1xuICAgICAgICBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKCdleGl0JywgdGhpcy5fb25FeGl0KTtcblxuICAgICAgICBhd2FpdCBzdXBlci5zdG9wXygpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvL2RlZmVycmVkIGV4ZWN1dGlvblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5pbml0aWFsaXplKCk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIGRlZmF1bHQgbG9nZ2VyIHNldCBvbiBjcmVhdGlvbiBvZiB0aGUgYXBwLlxuICAgICAqIEBwYXJhbSB7TG9nZ2VyfSBsb2dnZXIgXG4gICAgICovXG4gICAgcmVwbGFjZUxvZ2dlcihsb2dnZXIpIHtcbiAgICAgICAgdGhpcy5faW5qZWN0TG9nZ2VyKHRydWUgLyogZGV0YWN0ICovKTtcblxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5fZXh0ZXJuYWxMb2dnZXIgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgJ0EgbmV3IGxvZ2dlciBhdHRhY2hlZC4nKTtcbiAgICB9XG5cbiAgICBfaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5fcHdkID0gcHJvY2Vzcy5jd2QoKTtcbiAgICAgICAgaWYgKHRoaXMud29ya2luZ1BhdGggIT09IHRoaXMuX3B3ZCkgeyAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2Nlc3MuY2hkaXIodGhpcy53b3JraW5nUGF0aCk7XG4gICAgICAgIH0gICAgICBcblxuICAgICAgICB0aGlzLl9pbmplY3RMb2dnZXIoKTtcbiAgICAgICAgdGhpcy5faW5qZWN0RXJyb3JIYW5kbGVycygpOyBcbiAgICB9XG5cbiAgICBfdW5pbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBkZXRhY2ggPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbmplY3RFcnJvckhhbmRsZXJzKGRldGFjaCk7ICAgICAgIFxuICAgICAgICB0aGlzLl9pbmplY3RMb2dnZXIoZGV0YWNoKTsgICAgICAgICBcblxuICAgICAgICBwcm9jZXNzLmNoZGlyKHRoaXMuX3B3ZCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wd2Q7XG4gICAgfVxuXG4gICAgX2luamVjdExvZ2dlcihkZXRhY2gpIHtcbiAgICAgICAgaWYgKGRldGFjaCkge1xuICAgICAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCAnTG9nZ2VyIGlzIGRldGFjaGluZyAuLi4nKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9leHRlcm5hbExvZ2dlcikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9leHRlcm5hbExvZ2dlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxvZ2dlcjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsb2dnZXJPcHQgPSB0aGlzLm9wdGlvbnMubG9nZ2VyO1xuXG4gICAgICAgIGlmIChsb2dnZXJPcHQgaW5zdGFuY2VvZiBMb2dnZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyT3B0O1xuICAgICAgICAgICAgdGhpcy5fZXh0ZXJuYWxMb2dnZXIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGxvZ2dlck9wdC50cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyT3B0LnRyYW5zcG9ydHMgPSB3aW5zdG9uRmxpZ2h0KHdpbnN0b24sIGxvZ2dlck9wdC50cmFuc3BvcnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcihsb2dnZXJPcHQpOyAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsICdMb2dnZXIgaW5qZWN0ZWQuJyk7ICAgICAgICAgICAgXG4gICAgfVxuXG4gICAgX2luamVjdEVycm9ySGFuZGxlcnMoZGV0YWNoKSB7XG4gICAgICAgIGlmIChkZXRhY2gpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgJ1Byb2Nlc3Mtd2lkZSBlcnJvciBoYW5kbGVycyBhcmUgZGV0YWNoaW5nIC4uLicpO1xuICAgICAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcignd2FybmluZycsIHRoaXMuX29uV2FybmluZyk7XG4gICAgICAgICAgICBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKCd1bmNhdWdodEV4Y2VwdGlvbicsIHRoaXMuX29uVW5jYXVnaHRFeGNlcHRpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCB0aGlzLl9vblVuY2F1Z2h0RXhjZXB0aW9uKTsgXG4gICAgICAgIHByb2Nlc3Mub24oJ3dhcm5pbmcnLCB0aGlzLl9vbldhcm5pbmcpO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsICdQcm9jZXNzLXdpZGUgZXJyb3IgaGFuZGxlcnMgaW5qZWN0ZWQuJyk7ICAgICAgICAgICAgXG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSdW5hYmxlOyJdfQ==