"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  Promise
} = Util;

const winston = require('winston');

const winstonFlight = require('winstonflight');

const Logger = require('winston/lib/winston/logger');

const Runable = T => {
  var _temp;

  return _temp = class extends T {
    constructor(name, options) {
      super(name, {
        logger: {
          "level": "info",
          "transports": [{
            "type": "console",
            "options": {
              "format": winston.format.combine(winston.format.colorize(), winston.format.simple())
            }
          }, {
            "type": "file",
            "options": {
              "level": "info",
              "filename": `${name && _.kebabCase(name) || 'app'}.log`
            }
          }],
          ...(options && options.logger)
        },
        ..._.omit(options, ['logger'])
      });

      this._onUncaughtException = err => {
        this.log('error', err, () => {
          process.exit(1);
        });
      };

      this._onWarning = warning => {
        this.log('warn', warning);
      };

      this._onExit = code => {
        if (this.started) {
          this.stop_();
        }
      };
    }

    async start_() {
      this._initialize();

      return super.start_();
    }

    async stop_() {
      await super.stop_();
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          this._uninitialize();

          resolve(this);
        }, 0);
      });
    }

    _initialize() {
      this._pwd = process.cwd();

      if (this.workingPath !== this._pwd) {
        process.chdir(this.workingPath);
      }

      this._injectLogger();

      this._injectErrorHandlers();

      process.on('exit', this._onExit);
    }

    _uninitialize() {
      process.removeListener('exit', this._onExit);
      const detach = true;

      this._injectErrorHandlers(detach);

      this._injectLogger(detach);

      process.chdir(this._pwd);
      delete this._pwd;
    }

    _injectLogger(detach) {
      if (detach) {
        this.log('verbose', 'Logger is detaching ...');

        if (this._externalLogger) {
          delete this._externalLogger;
        } else {
          this.logger.close();
        }

        delete this.logger;
        return;
      }

      let loggerOpt = this.options.logger;

      if (loggerOpt instanceof Logger) {
        this.logger = loggerOpt;
        this._externalLogger = true;
      } else {
        if (loggerOpt.transports) {
          loggerOpt.transports = winstonFlight(winston, loggerOpt.transports);
        }

        this.logger = winston.createLogger(loggerOpt);
      }

      this.log('verbose', 'Logger injected.');
    }

    _injectErrorHandlers(detach) {
      if (detach) {
        this.log('verbose', 'Process-wide error handlers are detaching ...');
        process.removeListener('warning', this._onWarning);
        process.removeListener('uncaughtException', this._onUncaughtException);
        return;
      }

      process.on('uncaughtException', this._onUncaughtException);
      process.on('warning', this._onWarning);
      this.log('verbose', 'Process-wide error handlers injected.');
    }

  }, _temp;
};

module.exports = Runable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,