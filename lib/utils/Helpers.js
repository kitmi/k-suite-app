"use strict";

require("source-map-support/register");

exports.dependsOn = function (features, app, fromFeature) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new Error(`"${fromFeature}" feature requires "${hasNotEnabled}" feature to be enabled.`);
  }
};

exports.splitControllerAction = function (actionString) {
  let pos = actionString.lastIndexOf('.');

  if (pos <= 0) {
    throw new Error(`Unrecognized controller.action syntax: ${actionString}.`);
  }

  let controller = actionString.substr(0, pos);
  let action = actionString.substr(pos + 1);
  return {
    controller,
    action
  };
};

exports.tryRequire = function (packageName) {
  function tryRequireBy(packageName, mainModule, throwWhenNotFound) {
    try {
      return mainModule.require(packageName);
    } catch (error) {
      if (error.code === 'MODULE_NOT_FOUND') {
        if (throwWhenNotFound) {
          let pkgPaths = packageName.split('/');
          let npmPkgName = pkgPaths[0];

          if (pkgPaths[0].startsWith('@') && pkgPaths.length > 1) {
            npmPkgName += '/' + pkgPaths[1];
          }

          throw new Error(`Module "${packageName}" not found. Try run "npm install ${npmPkgName}" to install the dependency.`);
        }

        return undefined;
      }

      throw error;
    }
  }

  return tryRequireBy(packageName, module) || tryRequireBy(packageName, require.main, true);
};

exports.withStatus = (Base, STATUS) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.status = STATUS;
    }

  }, _temp;
};

exports.withExpose = Base => {
  var _temp2;

  return _temp2 = class extends Base {
    constructor(...args) {
      super(...args);
      this.expose = true;
    }

  }, _temp2;
};

exports.withName = Base => class extends Base {
  constructor(...args) {
    super(...args);
    this.name = this.constructor.name;
  }

};

exports.withExtraInfo = Base => class extends Base {
  constructor(...args) {
    super(...args);
    let expectedNumArgs = super.constructor.length;

    if (args.length > expectedNumArgs) {
      let extra = args.slice(expectedNumArgs);
      this.extraInfo = extra.length > 1 ? extra : extra[0];
    }
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,