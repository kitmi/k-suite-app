"use strict";

require("source-map-support/register");

const Feature = require('../enum/Feature');

const {
  _
} = require('rk-utils');

module.exports = {
  type: Feature.CONF,
  load_: async (app, config) => {
    const {
      Connector
    } = tryRequire('@k-suite/oolong');
    ['driver', 'connectionString', 'entity', 'key'].forEach(k => {
      if (!(k in config)) {
        throw new Error(`"${k}" is required for feature "configFromDataSource".`);
      }
    });
    let connector = Connector.createConnector(config.driver, config.connectionString, {
      logger: app.logger || app.server.logger
    });

    try {
      let cfgData = await connector.findOne_(config.entity, config.key);

      if (cfgData) {
        app.config = _.defaults(cfgData, app.config);
      } else {
        app.log('warn', `Feature "configFromDataSource" @ "${connector.getConnectionStringWithoutCredential()}" does not exist and this feature will be ignored.`);
      }
    } finally {
      await connector.end_();
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9jb25maWdGcm9tRGF0YVNvdXJjZS5qcyJdLCJuYW1lcyI6WyJGZWF0dXJlIiwicmVxdWlyZSIsIl8iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIkNPTkYiLCJsb2FkXyIsImFwcCIsImNvbmZpZyIsIkNvbm5lY3RvciIsInRyeVJlcXVpcmUiLCJmb3JFYWNoIiwiayIsIkVycm9yIiwiY29ubmVjdG9yIiwiY3JlYXRlQ29ubmVjdG9yIiwiZHJpdmVyIiwiY29ubmVjdGlvblN0cmluZyIsImxvZ2dlciIsInNlcnZlciIsImNmZ0RhdGEiLCJmaW5kT25lXyIsImVudGl0eSIsImtleSIsImRlZmF1bHRzIiwibG9nIiwiZ2V0Q29ubmVjdGlvblN0cmluZ1dpdGhvdXRDcmVkZW50aWFsIiwiZW5kXyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ00sSUFORDtBQWtCYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQixVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZ0JDLFVBQVUsQ0FBQyxpQkFBRCxDQUFoQztBQUVBLEtBQUUsUUFBRixFQUFZLGtCQUFaLEVBQWdDLFFBQWhDLEVBQTBDLEtBQTFDLEVBQWtEQyxPQUFsRCxDQUEwREMsQ0FBQyxJQUFJO0FBQzNELFVBQUksRUFBRUEsQ0FBQyxJQUFJSixNQUFQLENBQUosRUFBb0I7QUFDaEIsY0FBTSxJQUFJSyxLQUFKLENBQVcsSUFBR0QsQ0FBRSxtREFBaEIsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQU1BLFFBQUlFLFNBQVMsR0FBR0wsU0FBUyxDQUFDTSxlQUFWLENBQTBCUCxNQUFNLENBQUNRLE1BQWpDLEVBQXlDUixNQUFNLENBQUNTLGdCQUFoRCxFQUFrRTtBQUFFQyxNQUFBQSxNQUFNLEVBQUVYLEdBQUcsQ0FBQ1csTUFBSixJQUFjWCxHQUFHLENBQUNZLE1BQUosQ0FBV0Q7QUFBbkMsS0FBbEUsQ0FBaEI7O0FBRUEsUUFBSTtBQUNBLFVBQUlFLE9BQU8sR0FBRyxNQUFNTixTQUFTLENBQUNPLFFBQVYsQ0FBbUJiLE1BQU0sQ0FBQ2MsTUFBMUIsRUFBa0NkLE1BQU0sQ0FBQ2UsR0FBekMsQ0FBcEI7O0FBRUEsVUFBSUgsT0FBSixFQUFhO0FBQ1RiLFFBQUFBLEdBQUcsQ0FBQ0MsTUFBSixHQUFhUCxDQUFDLENBQUN1QixRQUFGLENBQVdKLE9BQVgsRUFBb0JiLEdBQUcsQ0FBQ0MsTUFBeEIsQ0FBYjtBQUNILE9BRkQsTUFFTztBQUNIRCxRQUFBQSxHQUFHLENBQUNrQixHQUFKLENBQVEsTUFBUixFQUFpQixxQ0FBb0NYLFNBQVMsQ0FBQ1ksb0NBQVYsRUFBaUQsb0RBQXRHO0FBQ0g7QUFFSixLQVRELFNBU1U7QUFDTixZQUFNWixTQUFTLENBQUNhLElBQVYsRUFBTjtBQUNIO0FBQ0o7QUF6Q1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgc2VydmVyIHNwZWNpZmljIGNvbmZpZyBpZGVudGlmaWVkIGJ5IGhvc3QgbmFtZS5cbiAqIEBtb2R1bGUgRmVhdHVyZV9Db25maWdCeUhvc3RuYW1lXG4gKi9cblxuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgY29uZmlndXJhdGlvbiBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLkNPTkYsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtBcHB9IGFwcCAtIFRoZSBjbGkgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gQ29uZmlnIGZvciB0aGUgZmVhdHVyZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmRyaXZlcl0gLSBEYXRhIHNvdXJjZSBkcml2ZXJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5jb25uZWN0aW9uU3RyaW5nXSAtIENvbm5lY3Rpb24gc3RyaW5nXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuZW50aXR5XSAtIEVudGl0eSBvZiB0aGUgY29uZmlnXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcua2V5XSAtIFF1ZXJ5IGtleSBvZiB0aGUgY29uZmlnXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCBjb25maWcpID0+IHtcbiAgICAgICAgY29uc3QgeyBDb25uZWN0b3IgfSA9IHRyeVJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuXG4gICAgICAgIFsgJ2RyaXZlcicsICdjb25uZWN0aW9uU3RyaW5nJywgJ2VudGl0eScsICdrZXknIF0uZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIGlmICghKGsgaW4gY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke2t9XCIgaXMgcmVxdWlyZWQgZm9yIGZlYXR1cmUgXCJjb25maWdGcm9tRGF0YVNvdXJjZVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgY29ubmVjdG9yID0gQ29ubmVjdG9yLmNyZWF0ZUNvbm5lY3Rvcihjb25maWcuZHJpdmVyLCBjb25maWcuY29ubmVjdGlvblN0cmluZywgeyBsb2dnZXI6IGFwcC5sb2dnZXIgfHwgYXBwLnNlcnZlci5sb2dnZXIgfSk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNmZ0RhdGEgPSBhd2FpdCBjb25uZWN0b3IuZmluZE9uZV8oY29uZmlnLmVudGl0eSwgY29uZmlnLmtleSk7XG5cbiAgICAgICAgICAgIGlmIChjZmdEYXRhKSB7XG4gICAgICAgICAgICAgICAgYXBwLmNvbmZpZyA9IF8uZGVmYXVsdHMoY2ZnRGF0YSwgYXBwLmNvbmZpZyk7ICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgYEZlYXR1cmUgXCJjb25maWdGcm9tRGF0YVNvdXJjZVwiIEAgXCIke2Nvbm5lY3Rvci5nZXRDb25uZWN0aW9uU3RyaW5nV2l0aG91dENyZWRlbnRpYWwoKX1cIiBkb2VzIG5vdCBleGlzdCBhbmQgdGhpcyBmZWF0dXJlIHdpbGwgYmUgaWdub3JlZC5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IuZW5kXygpO1xuICAgICAgICB9XG4gICAgfVxufTsiXX0=