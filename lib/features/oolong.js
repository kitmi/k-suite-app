"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  Promise,
  pascalCase
} = require('rk-utils');

const Feature = require('../enum/Feature');

const Literal = require('../enum/Literal');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, oolong) => {
    app.oolong = oolong;

    if (!oolong.schemaDeployment) {
      throw new Error('Missing "schemaDeployment" in oolong config.');
    }

    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = oolong.schemaDeployment[schemaName];

      if (!schemaInfo || !schemaInfo.dataSource) {
        throw new Error('Missing "dataSource" in schemaDeployment section of oolong config.');
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new Error('Invalid data source.');
      }

      let i18n = app.getService('i18n') || app.__;

      const Db = require(path.join(app.backendPath, Literal.MODELS_PATH, pascalCase(schemaName)));

      let db = new Db(connector, i18n);
      db.app = app;
      DbCache[schemaName] = db;
      return db;
    };

    app.model = modelFullName => {
      let [schemaName, modelName] = modelFullName.split('.');
      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vb2xvbmcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiUHJvbWlzZSIsInBhc2NhbENhc2UiLCJGZWF0dXJlIiwiTGl0ZXJhbCIsIkRiQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIklOSVQiLCJsb2FkXyIsImFwcCIsIm9vbG9uZyIsInNjaGVtYURlcGxveW1lbnQiLCJFcnJvciIsImRiIiwic2NoZW1hTmFtZSIsInNjaGVtYUluZm8iLCJkYXRhU291cmNlIiwiY29ubmVjdG9yIiwiZ2V0U2VydmljZSIsImkxOG4iLCJfXyIsIkRiIiwiam9pbiIsImJhY2tlbmRQYXRoIiwiTU9ERUxTX1BBVEgiLCJtb2RlbCIsIm1vZGVsRnVsbE5hbWUiLCJtb2RlbE5hbWUiLCJzcGxpdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxPQUFMO0FBQWNDLEVBQUFBO0FBQWQsSUFBNkJILE9BQU8sQ0FBQyxVQUFELENBQTFDOztBQUNBLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU1LLE9BQU8sR0FBR0wsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUVBLE1BQU1NLE9BQU8sR0FBRyxFQUFoQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFLYkMsRUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNNLElBTEQ7QUFjYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQkQsSUFBQUEsR0FBRyxDQUFDQyxNQUFKLEdBQWFBLE1BQWI7O0FBRUEsUUFBSSxDQUFDQSxNQUFNLENBQUNDLGdCQUFaLEVBQThCO0FBQzFCLFlBQU0sSUFBSUMsS0FBSixDQUFVLDhDQUFWLENBQU47QUFDSDs7QUFFREgsSUFBQUEsR0FBRyxDQUFDSSxFQUFKLEdBQVVDLFVBQUQsSUFBZ0I7QUFDckIsVUFBSVgsT0FBTyxDQUFDVyxVQUFELENBQVgsRUFBeUIsT0FBT1gsT0FBTyxDQUFDVyxVQUFELENBQWQ7QUFFekIsVUFBSUMsVUFBVSxHQUFHTCxNQUFNLENBQUNDLGdCQUFQLENBQXdCRyxVQUF4QixDQUFqQjs7QUFDQSxVQUFJLENBQUNDLFVBQUQsSUFBZSxDQUFDQSxVQUFVLENBQUNDLFVBQS9CLEVBQTJDO0FBRXZDLGNBQU0sSUFBSUosS0FBSixDQUFVLG9FQUFWLENBQU47QUFDSDs7QUFFRCxVQUFJSyxTQUFTLEdBQUdSLEdBQUcsQ0FBQ1MsVUFBSixDQUFlSCxVQUFVLENBQUNDLFVBQTFCLENBQWhCOztBQUNBLFVBQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNaLGNBQU0sSUFBSUwsS0FBSixDQUFVLHNCQUFWLENBQU47QUFDSDs7QUFFRCxVQUFJTyxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1MsVUFBSixDQUFlLE1BQWYsS0FBMEJULEdBQUcsQ0FBQ1csRUFBekM7O0FBRUEsWUFBTUMsRUFBRSxHQUFHeEIsT0FBTyxDQUFDRCxJQUFJLENBQUMwQixJQUFMLENBQVViLEdBQUcsQ0FBQ2MsV0FBZCxFQUEyQnJCLE9BQU8sQ0FBQ3NCLFdBQW5DLEVBQWdEeEIsVUFBVSxDQUFDYyxVQUFELENBQTFELENBQUQsQ0FBbEI7O0FBQ0EsVUFBSUQsRUFBRSxHQUFHLElBQUlRLEVBQUosQ0FBT0osU0FBUCxFQUFrQkUsSUFBbEIsQ0FBVDtBQUNBTixNQUFBQSxFQUFFLENBQUNKLEdBQUgsR0FBU0EsR0FBVDtBQUVBTixNQUFBQSxPQUFPLENBQUNXLFVBQUQsQ0FBUCxHQUFzQkQsRUFBdEI7QUFFQSxhQUFPQSxFQUFQO0FBQ0gsS0F2QkQ7O0FBeUJBSixJQUFBQSxHQUFHLENBQUNnQixLQUFKLEdBQWFDLGFBQUQsSUFBbUI7QUFDM0IsVUFBSSxDQUFFWixVQUFGLEVBQWNhLFNBQWQsSUFBNEJELGFBQWEsQ0FBQ0UsS0FBZCxDQUFvQixHQUFwQixDQUFoQztBQUNBLGFBQU9uQixHQUFHLENBQUNJLEVBQUosQ0FBT0MsVUFBUCxFQUFtQlcsS0FBbkIsQ0FBeUJFLFNBQXpCLENBQVA7QUFDSCxLQUhEO0FBSUg7QUFsRFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgb29sb25nIERTTFxuICogQG1vZHVsZSBGZWF0dXJlX09vbG9uZ1xuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIFByb21pc2UsIHBhc2NhbENhc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnLi4vZW51bS9GZWF0dXJlJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi4vZW51bS9MaXRlcmFsJyk7XG5cbmNvbnN0IERiQ2FjaGUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBpbml0IHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuSU5JVCxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9vbG9uZyAtIE9vbG9uZyBzZXR0aW5nc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29vbG9uZy5sb2dTcWxTdGF0ZW1lbnRdIC0gRmxhZyB0byB0dXJuIG9uIHNxbCBkZWJ1Z2dpbmcgbG9nXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCBvb2xvbmcpID0+IHtcbiAgICAgICAgYXBwLm9vbG9uZyA9IG9vbG9uZztcblxuICAgICAgICBpZiAoIW9vbG9uZy5zY2hlbWFEZXBsb3ltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgXCJzY2hlbWFEZXBsb3ltZW50XCIgaW4gb29sb25nIGNvbmZpZy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5kYiA9IChzY2hlbWFOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoRGJDYWNoZVtzY2hlbWFOYW1lXSkgcmV0dXJuIERiQ2FjaGVbc2NoZW1hTmFtZV07XG5cbiAgICAgICAgICAgIGxldCBzY2hlbWFJbmZvID0gb29sb25nLnNjaGVtYURlcGxveW1lbnRbc2NoZW1hTmFtZV07XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUluZm8gfHwgIXNjaGVtYUluZm8uZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcImRhdGFTb3VyY2VcIiBpbiBzY2hlbWFEZXBsb3ltZW50IHNlY3Rpb24gb2Ygb29sb25nIGNvbmZpZy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbm5lY3RvciA9IGFwcC5nZXRTZXJ2aWNlKHNjaGVtYUluZm8uZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhIHNvdXJjZS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGkxOG4gPSBhcHAuZ2V0U2VydmljZSgnaTE4bicpIHx8IGFwcC5fXztcblxuICAgICAgICAgICAgY29uc3QgRGIgPSByZXF1aXJlKHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuTU9ERUxTX1BBVEgsIHBhc2NhbENhc2Uoc2NoZW1hTmFtZSkpKTtcbiAgICAgICAgICAgIGxldCBkYiA9IG5ldyBEYihjb25uZWN0b3IsIGkxOG4pO1xuICAgICAgICAgICAgZGIuYXBwID0gYXBwO1xuXG4gICAgICAgICAgICBEYkNhY2hlW3NjaGVtYU5hbWVdID0gZGI7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiBkYjtcbiAgICAgICAgfTsgICAgICAgXG4gICAgICAgIFxuICAgICAgICBhcHAubW9kZWwgPSAobW9kZWxGdWxsTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IFsgc2NoZW1hTmFtZSwgbW9kZWxOYW1lIF0gPSBtb2RlbEZ1bGxOYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICByZXR1cm4gYXBwLmRiKHNjaGVtYU5hbWUpLm1vZGVsKG1vZGVsTmFtZSk7XG4gICAgICAgIH07XG4gICAgfVxufTsiXX0=