"use strict";

require("source-map-support/register");

const Feature = require('../enum/Feature');

const {
  tryRequire
} = require('../utils/Helpers');

const Imap = tryRequire('imap');

const {
  _,
  waitUntil_,
  Promise
} = require('rk-utils');

class ImapClient {
  constructor(app, name, config) {
    this.app = app;
    this.name = name;
    this.config = config;
    this.closing = false;
    let {
      autoReconnect,
      ...imapConfig
    } = config;
    this.imap = new Imap(imapConfig);
    this.imap.on('error', error => {
      this.error = error;
      this.app.logError(error);
    });
    this.imap.on('alert', message => {
      this.app.log('warning', `The imap server [${this.name}] issues an alert. Message: ${message}`);
    });
    this.imap.once('ready', () => {
      this.ready = true;
      this.app.log('info', `The imap server [${this.name}] is ready.`);
    });
    this.imap.once('close', () => {
      this.ready = false;
      this.app.log('info', `The connection to imap server [${this.name}] is closed.`);

      if (autoReconnect && !this.closing) {
        this.imap.connect();
      }
    });
    this.imap.once('end', () => {
      this.ready = false;
      this.app.log('info', `The imap server [${this.name}] is ended.`);
    });
    let options = {
      context: this.imap
    };
    ['openBox', 'closeBox', 'addBox', 'delBox', 'renameBox', 'subscribeBox', 'unsubscribeBox', 'status', 'getBoxes', 'getSubscribedBoxes', 'expunge', 'append', 'search', 'copy', 'move', 'addFlags', 'delFlags', 'setFlags', 'addKeywords', 'delKeywords', 'setKeywords', 'setLabels', 'addLabels', 'delLabels'].forEach(methodName => {
      this[methodName + '_'] = Promise.promisify(this.imap[methodName], options);
    });
    this.imap.connect();
  }

  async waitForReady_() {
    return waitUntil_(() => this.ready, 100, 100);
  }

  async connect_() {
    if (!this.ready) {
      this.imap.connect();
      return this.waitForReady_();
    }

    return this.ready;
  }

  async close_() {
    if (this.ready) {
      this.closing = true;
      this.imap.end();
      let ended = await waitUntil_(() => !this.ready, 100, 300);

      if (!ended) {
        this.imap.destroy();
      }
    }
  }

  serverSupports(caps) {
    return this.imap.serverSupports(caps);
  }

  async fetch_(source, fetchOptions) {
    let imapFetch = this.imap.fetch(source, fetchOptions);
    let messages = [];
    imapFetch.on('message', (msg, seqno) => {
      let attributes;
      let body = [];
      msg.on('body', (stream, info) => {
        body.push({
          section: info.which,
          size: info.size,
          stream
        });
      });
      msg.once('attributes', attrs => {
        attributes = attrs;
      });
      msg.once('end', () => {
        messages.push({
          seqno,
          attributes,
          body
        });
      });
    });
    return await new Promise((resolve, reject) => {
      imapFetch.on('end', () => {
        resolve(messages);
      });
      imapFetch.on('error', error => {
        reject(error);
      });
    });
  }

}

module.exports = {
  type: Feature.SERVICE,
  load_: async function (app, settings) {
    _.forOwn(settings, (cfg, name) => {
      let client = new ImapClient(app, name, cfg);
      app.registerService(`imap.${name}`, client);
      app.on('stopping', elegantStoppers => {
        elegantStoppers.push(client.close_());
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,