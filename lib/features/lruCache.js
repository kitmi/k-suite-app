"use strict";

require("source-map-support/register");

const Feature = require('../enum/Feature');

const {
  tryRequire
} = require('../utils/Helpers');

module.exports = {
  type: Feature.SERVICE,
  load_: (app, resourceOptions) => {
    let LRU = tryRequire('lru-cache');

    if (resourceOptions.resources) {
      resourceOptions.resources.forEach((options, resource) => {
        let cache = new LRU(options);
        app.registerService('lruCache:' + resource, cache);
      });
    }

    const cacheService = {
      res: resource => {
        let key = 'lruCache:' + resource;
        let cache = app.getService(key);
        if (cache) return cache;
        let options = resourceOptions["default"] || {
          max: 0
        };

        if (resourceOptions.resources && resource in resourceOptions.resources) {
          options = { ...options,
            ...resourceOptions.resources[resource]
          };
        }

        cache = new LRU(options);
        app.registerService(key, cache);
        return cache;
      },
      reset: resource => {
        let cache = cacheService.res(resource);
        cache.reset();
        return cache;
      }
    };
    app.registerService('lruCache', cacheService);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9scnVDYWNoZS5qcyJdLCJuYW1lcyI6WyJGZWF0dXJlIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlNFUlZJQ0UiLCJsb2FkXyIsImFwcCIsInJlc291cmNlT3B0aW9ucyIsIkxSVSIsInJlc291cmNlcyIsImZvckVhY2giLCJvcHRpb25zIiwicmVzb3VyY2UiLCJjYWNoZSIsInJlZ2lzdGVyU2VydmljZSIsImNhY2hlU2VydmljZSIsInJlcyIsImtleSIsImdldFNlcnZpY2UiLCJtYXgiLCJyZXNldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBaUJELE9BQU8sQ0FBQyxrQkFBRCxDQUE5Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRUwsT0FBTyxDQUFDTSxPQU5EO0FBZ0JiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxlQUFOLEtBQTBCO0FBQzdCLFFBQUlDLEdBQUcsR0FBR1IsVUFBVSxDQUFDLFdBQUQsQ0FBcEI7O0FBR0EsUUFBSU8sZUFBZSxDQUFDRSxTQUFwQixFQUErQjtBQUMzQkYsTUFBQUEsZUFBZSxDQUFDRSxTQUFoQixDQUEwQkMsT0FBMUIsQ0FBa0MsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEtBQXVCO0FBQ3JELFlBQUlDLEtBQUssR0FBRyxJQUFJTCxHQUFKLENBQVFHLE9BQVIsQ0FBWjtBQUNBTCxRQUFBQSxHQUFHLENBQUNRLGVBQUosQ0FBb0IsY0FBY0YsUUFBbEMsRUFBNENDLEtBQTVDO0FBQ0gsT0FIRDtBQUlIOztBQUVELFVBQU1FLFlBQVksR0FBRztBQUNqQkMsTUFBQUEsR0FBRyxFQUFHSixRQUFELElBQWM7QUFDZixZQUFJSyxHQUFHLEdBQUcsY0FBY0wsUUFBeEI7QUFDQSxZQUFJQyxLQUFLLEdBQUdQLEdBQUcsQ0FBQ1ksVUFBSixDQUFlRCxHQUFmLENBQVo7QUFDQSxZQUFJSixLQUFKLEVBQVcsT0FBT0EsS0FBUDtBQUVYLFlBQUlGLE9BQU8sR0FBR0osZUFBZSxDQUFDLFNBQUQsQ0FBZixJQUE4QjtBQUFFWSxVQUFBQSxHQUFHLEVBQUU7QUFBUCxTQUE1Qzs7QUFFQSxZQUFJWixlQUFlLENBQUNFLFNBQWhCLElBQThCRyxRQUFRLElBQUlMLGVBQWUsQ0FBQ0UsU0FBOUQsRUFBMEU7QUFDdEVFLFVBQUFBLE9BQU8sR0FBRyxFQUFFLEdBQUdBLE9BQUw7QUFBYyxlQUFHSixlQUFlLENBQUNFLFNBQWhCLENBQTBCRyxRQUExQjtBQUFqQixXQUFWO0FBQ0g7O0FBRURDLFFBQUFBLEtBQUssR0FBRyxJQUFJTCxHQUFKLENBQVFHLE9BQVIsQ0FBUjtBQUNBTCxRQUFBQSxHQUFHLENBQUNRLGVBQUosQ0FBb0JHLEdBQXBCLEVBQXlCSixLQUF6QjtBQUNBLGVBQU9BLEtBQVA7QUFDSCxPQWZnQjtBQWlCakJPLE1BQUFBLEtBQUssRUFBR1IsUUFBRCxJQUFjO0FBQ2pCLFlBQUlDLEtBQUssR0FBR0UsWUFBWSxDQUFDQyxHQUFiLENBQWlCSixRQUFqQixDQUFaO0FBQ0FDLFFBQUFBLEtBQUssQ0FBQ08sS0FBTjtBQUNBLGVBQU9QLEtBQVA7QUFDSDtBQXJCZ0IsS0FBckI7QUF3QkFQLElBQUFBLEdBQUcsQ0FBQ1EsZUFBSixDQUFvQixVQUFwQixFQUFnQ0MsWUFBaEM7QUFDSDtBQXBEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBMUlUgY2FjaGUgZmVhdHVyZVxuICogQG1vZHVsZSBGZWF0dXJlX0xydUNhY2hlXG4gKi9cblxuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlc291cmNlT3B0aW9ucyAtIFRoZSBjYWNoZSBvcHRpb25zIGZvciBzcGVjaWZpZWQgcmVzb3VyY2VcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW3Jlc291cmNlT3B0aW9ucy5kZWZhdWx0XSAtIERlZmF1bHQgb3B0aW9ucywgd2lsbCBiZSBvdmVycmlkZWQgYnkgcmVzb3VyY2Utc3BlY2lmaWMgb3B0aW9ucyBpZiBhbnlcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW3Jlc291cmNlT3B0aW9ucy5yZXNvdXJjZXNdIC0gUmVzb3VyY2Utc3BlY2lmaWMgb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogKGFwcCwgcmVzb3VyY2VPcHRpb25zKSA9PiB7XG4gICAgICAgIGxldCBMUlUgPSB0cnlSZXF1aXJlKCdscnUtY2FjaGUnKTtcblxuICAgICAgICAvL3ByZS1jcmVhdGVcbiAgICAgICAgaWYgKHJlc291cmNlT3B0aW9ucy5yZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHJlc291cmNlT3B0aW9ucy5yZXNvdXJjZXMuZm9yRWFjaCgob3B0aW9ucywgcmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2FjaGUgPSBuZXcgTFJVKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ2xydUNhY2hlOicgKyByZXNvdXJjZSwgY2FjaGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYWNoZVNlcnZpY2UgPSB7XG4gICAgICAgICAgICByZXM6IChyZXNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSAnbHJ1Q2FjaGU6JyArIHJlc291cmNlO1xuICAgICAgICAgICAgICAgIGxldCBjYWNoZSA9IGFwcC5nZXRTZXJ2aWNlKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlKSByZXR1cm4gY2FjaGU7XG5cbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHJlc291cmNlT3B0aW9uc1tcImRlZmF1bHRcIl0gfHwgeyBtYXg6IDAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZU9wdGlvbnMucmVzb3VyY2VzICYmIChyZXNvdXJjZSBpbiByZXNvdXJjZU9wdGlvbnMucmVzb3VyY2VzKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCAuLi5yZXNvdXJjZU9wdGlvbnMucmVzb3VyY2VzW3Jlc291cmNlXSB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhY2hlID0gbmV3IExSVShvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKGtleSwgY2FjaGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlc2V0OiAocmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2FjaGUgPSBjYWNoZVNlcnZpY2UucmVzKHJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ2xydUNhY2hlJywgY2FjaGVTZXJ2aWNlKTtcbiAgICB9XG59OyJdfQ==