"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('../utils/Helpers');

const Feature = require('../enum/Feature');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: async (app, dataSources) => {
    const {
      Connector
    } = tryRequire('@k-suite/oolong');

    _.forOwn(dataSources, (dataSource, dbms) => {
      _.forOwn(dataSource, (config, connectorName) => {
        let serviceName = dbms + '.' + connectorName;

        if (!config.connection) {
          throw new InvalidConfiguration(`Missing connection config for data source "${serviceName}".`, app, `dataSource.${dbms}.${connectorName}`);
        }

        let {
          connection: connectionString,
          ...other
        } = config;
        let connectorService = Connector.createConnector(dbms, connectionString, {
          logger: app.server ? app.server.logger : app.logger,
          ...other
        });
        app.registerService(serviceName, connectorService);
        app.on('stopping', () => {
          connectorService.end_().then();
        });
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kYXRhU291cmNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkZlYXR1cmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiZGF0YVNvdXJjZXMiLCJDb25uZWN0b3IiLCJmb3JPd24iLCJkYXRhU291cmNlIiwiZGJtcyIsImNvbmZpZyIsImNvbm5lY3Rvck5hbWUiLCJzZXJ2aWNlTmFtZSIsImNvbm5lY3Rpb24iLCJjb25uZWN0aW9uU3RyaW5nIiwib3RoZXIiLCJjb25uZWN0b3JTZXJ2aWNlIiwiY3JlYXRlQ29ubmVjdG9yIiwibG9nZ2VyIiwic2VydmVyIiwicmVnaXN0ZXJTZXJ2aWNlIiwib24iLCJlbmRfIiwidGhlbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCRCxPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQTJCSCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVKLE9BQU8sQ0FBQ0ssT0FMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsR0FBUCxFQUFZQyxXQUFaLEtBQTRCO0FBQy9CLFVBQU07QUFBRUMsTUFBQUE7QUFBRixRQUFnQlYsVUFBVSxDQUFDLGlCQUFELENBQWhDOztBQUVBRixJQUFBQSxDQUFDLENBQUNhLE1BQUYsQ0FBU0YsV0FBVCxFQUFzQixDQUFDRyxVQUFELEVBQWFDLElBQWIsS0FBc0I7QUFDeENmLE1BQUFBLENBQUMsQ0FBQ2EsTUFBRixDQUFTQyxVQUFULEVBQXFCLENBQUNFLE1BQUQsRUFBU0MsYUFBVCxLQUEyQjtBQUM1QyxZQUFJQyxXQUFXLEdBQUdILElBQUksR0FBRyxHQUFQLEdBQWFFLGFBQS9COztBQUVBLFlBQUksQ0FBQ0QsTUFBTSxDQUFDRyxVQUFaLEVBQXdCO0FBQ3BCLGdCQUFNLElBQUlmLG9CQUFKLENBQ0QsOENBQTZDYyxXQUFZLElBRHhELEVBRUZSLEdBRkUsRUFHRCxjQUFhSyxJQUFLLElBQUdFLGFBQWMsRUFIbEMsQ0FBTjtBQUtIOztBQUVELFlBQUk7QUFBRUUsVUFBQUEsVUFBVSxFQUFFQyxnQkFBZDtBQUFnQyxhQUFHQztBQUFuQyxZQUE2Q0wsTUFBakQ7QUFFQSxZQUFJTSxnQkFBZ0IsR0FBR1YsU0FBUyxDQUFDVyxlQUFWLENBQTBCUixJQUExQixFQUFnQ0ssZ0JBQWhDLEVBQWtEO0FBQUVJLFVBQUFBLE1BQU0sRUFBRWQsR0FBRyxDQUFDZSxNQUFKLEdBQWFmLEdBQUcsQ0FBQ2UsTUFBSixDQUFXRCxNQUF4QixHQUFpQ2QsR0FBRyxDQUFDYyxNQUEvQztBQUF1RCxhQUFHSDtBQUExRCxTQUFsRCxDQUF2QjtBQUNBWCxRQUFBQSxHQUFHLENBQUNnQixlQUFKLENBQW9CUixXQUFwQixFQUFpQ0ksZ0JBQWpDO0FBRUFaLFFBQUFBLEdBQUcsQ0FBQ2lCLEVBQUosQ0FBTyxVQUFQLEVBQW1CLE1BQU07QUFDckJMLFVBQUFBLGdCQUFnQixDQUFDTSxJQUFqQixHQUF3QkMsSUFBeEI7QUFDSCxTQUZEO0FBR0gsT0FuQkQ7QUFvQkgsS0FyQkQ7QUFzQkg7QUF0Q1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgZGF0YSBzb3VyY2UgZmVhdHVyZVxuICogQG1vZHVsZSBGZWF0dXJlX0RhdGFTb3VyY2VcbiAqL1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCcuLi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFTb3VyY2VzIC0gRGF0YXNvdXJjZSBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgZGF0YVNvdXJjZXMpID0+IHtcbiAgICAgICAgY29uc3QgeyBDb25uZWN0b3IgfSA9IHRyeVJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuXG4gICAgICAgIF8uZm9yT3duKGRhdGFTb3VyY2VzLCAoZGF0YVNvdXJjZSwgZGJtcykgPT4ge1xuICAgICAgICAgICAgXy5mb3JPd24oZGF0YVNvdXJjZSwgKGNvbmZpZywgY29ubmVjdG9yTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzZXJ2aWNlTmFtZSA9IGRibXMgKyAnLicgKyBjb25uZWN0b3JOYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBgTWlzc2luZyBjb25uZWN0aW9uIGNvbmZpZyBmb3IgZGF0YSBzb3VyY2UgXCIke3NlcnZpY2VOYW1lfVwiLmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBgZGF0YVNvdXJjZS4ke2RibXN9LiR7Y29ubmVjdG9yTmFtZX1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCB7IGNvbm5lY3Rpb246IGNvbm5lY3Rpb25TdHJpbmcsIC4uLm90aGVyIH0gPSBjb25maWc7ICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgY29ubmVjdG9yU2VydmljZSA9IENvbm5lY3Rvci5jcmVhdGVDb25uZWN0b3IoZGJtcywgY29ubmVjdGlvblN0cmluZywgeyBsb2dnZXI6IGFwcC5zZXJ2ZXIgPyBhcHAuc2VydmVyLmxvZ2dlciA6IGFwcC5sb2dnZXIsIC4uLm90aGVyIH0pO1xuICAgICAgICAgICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2Uoc2VydmljZU5hbWUsIGNvbm5lY3RvclNlcnZpY2UpO1xuXG4gICAgICAgICAgICAgICAgYXBwLm9uKCdzdG9wcGluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yU2VydmljZS5lbmRfKCkudGhlbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxufTsiXX0=