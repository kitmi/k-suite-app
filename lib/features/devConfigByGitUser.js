"use strict";

require("source-map-support/register");

const path = require('path');

const Feature = require('../enum/Feature');

const {
  fs,
  runCmdSync
} = require('rk-utils');

const JsonConfigProvider = require('rk-config/lib/JsonConfigProvider');

module.exports = {
  type: Feature.CONF,
  load_: async (app, options) => {
    let devName;

    try {
      devName = runCmdSync('git config --global user.email').trim();
    } catch (e) {
      app.log('warn', e.message || e);
    }

    if (devName === '') {
      if (options.fallbackName) {
        devName = options.fallbackName;
      } else {
        app.log('warn', 'Unable to read "user.email" of git config and no fallback option is configured.');
        return;
      }
    }

    devName = devName.substr(0, devName.indexOf('@'));
    const devConfigFile = path.join(app.configPath, app.configName + '.' + devName + '.json');

    if (!fs.existsSync(devConfigFile)) {
      app.log('warn', `Developer specific config file "${devConfigFile}" does not exist and will use defaults.`);
      return;
    }

    app.configLoader.provider = new JsonConfigProvider(devConfigFile);
    return app.loadConfig_();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kZXZDb25maWdCeUdpdFVzZXIuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJGZWF0dXJlIiwiZnMiLCJydW5DbWRTeW5jIiwiSnNvbkNvbmZpZ1Byb3ZpZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJDT05GIiwibG9hZF8iLCJhcHAiLCJvcHRpb25zIiwiZGV2TmFtZSIsInRyaW0iLCJlIiwibG9nIiwibWVzc2FnZSIsImZhbGxiYWNrTmFtZSIsInN1YnN0ciIsImluZGV4T2YiLCJkZXZDb25maWdGaWxlIiwiam9pbiIsImNvbmZpZ1BhdGgiLCJjb25maWdOYW1lIiwiZXhpc3RzU3luYyIsImNvbmZpZ0xvYWRlciIsInByb3ZpZGVyIiwibG9hZENvbmZpZ18iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBLEVBQUY7QUFBTUMsRUFBQUE7QUFBTixJQUFxQkgsT0FBTyxDQUFDLFVBQUQsQ0FBbEM7O0FBRUEsTUFBTUksa0JBQWtCLEdBQUdKLE9BQU8sQ0FBQyxrQ0FBRCxDQUFsQzs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRU4sT0FBTyxDQUFDTyxJQU5EO0FBZWJDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDM0IsUUFBSUMsT0FBSjs7QUFFQSxRQUFJO0FBQ0FBLE1BQUFBLE9BQU8sR0FBR1QsVUFBVSxDQUFDLGdDQUFELENBQVYsQ0FBNkNVLElBQTdDLEVBQVY7QUFDSCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1JKLE1BQUFBLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE1BQVIsRUFBZ0JELENBQUMsQ0FBQ0UsT0FBRixJQUFhRixDQUE3QjtBQUNIOztBQUVELFFBQUlGLE9BQU8sS0FBSyxFQUFoQixFQUFvQjtBQUNoQixVQUFJRCxPQUFPLENBQUNNLFlBQVosRUFBMEI7QUFDdEJMLFFBQUFBLE9BQU8sR0FBR0QsT0FBTyxDQUFDTSxZQUFsQjtBQUNILE9BRkQsTUFFTztBQUNIUCxRQUFBQSxHQUFHLENBQUNLLEdBQUosQ0FBUSxNQUFSLEVBQWdCLGlGQUFoQjtBQUNBO0FBQ0g7QUFDSjs7QUFFREgsSUFBQUEsT0FBTyxHQUFHQSxPQUFPLENBQUNNLE1BQVIsQ0FBZSxDQUFmLEVBQWtCTixPQUFPLENBQUNPLE9BQVIsQ0FBZ0IsR0FBaEIsQ0FBbEIsQ0FBVjtBQUVBLFVBQU1DLGFBQWEsR0FBR3JCLElBQUksQ0FBQ3NCLElBQUwsQ0FBVVgsR0FBRyxDQUFDWSxVQUFkLEVBQTBCWixHQUFHLENBQUNhLFVBQUosR0FBaUIsR0FBakIsR0FBdUJYLE9BQXZCLEdBQWlDLE9BQTNELENBQXRCOztBQUNBLFFBQUksQ0FBQ1YsRUFBRSxDQUFDc0IsVUFBSCxDQUFjSixhQUFkLENBQUwsRUFBbUM7QUFDL0JWLE1BQUFBLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLE1BQVIsRUFBaUIsbUNBQWtDSyxhQUFjLHlDQUFqRTtBQUNBO0FBQ0g7O0FBRURWLElBQUFBLEdBQUcsQ0FBQ2UsWUFBSixDQUFpQkMsUUFBakIsR0FBNEIsSUFBSXRCLGtCQUFKLENBQXVCZ0IsYUFBdkIsQ0FBNUI7QUFDQSxXQUFPVixHQUFHLENBQUNpQixXQUFKLEVBQVA7QUFDSDtBQTNDWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBkZXZlbG9wZXIgc3BlY2lmaWMgY29uZmlnIGlkZW50aWZpZWQgYnkgZ2l0IHVzZXIgbmFtZS5cbiAqIEBtb2R1bGUgRmVhdHVyZV9EZXZDb25maWdCeUdpdFVzZXJcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJy4uL2VudW0vRmVhdHVyZScpO1xuY29uc3QgeyBmcywgcnVuQ21kU3luYyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgSnNvbkNvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZSgncmstY29uZmlnL2xpYi9Kc29uQ29uZmlnUHJvdmlkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGNvbmZpZ3VyYXRpb24gc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5DT05GLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgY2xpIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgZmVhdHVyZSAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmZhbGxiYWNrTmFtZV0gLSBGYWxsYmFjayB1c2VybmFtZSBmb3IgZ2l0IHVzZXIgbm90IGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICBsZXQgZGV2TmFtZTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkZXZOYW1lID0gcnVuQ21kU3luYygnZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLmVtYWlsJykudHJpbSgpOyAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBhcHAubG9nKCd3YXJuJywgZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBpZiAoZGV2TmFtZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZhbGxiYWNrTmFtZSkge1xuICAgICAgICAgICAgICAgIGRldk5hbWUgPSBvcHRpb25zLmZhbGxiYWNrTmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygnd2FybicsICdVbmFibGUgdG8gcmVhZCBcInVzZXIuZW1haWxcIiBvZiBnaXQgY29uZmlnIGFuZCBubyBmYWxsYmFjayBvcHRpb24gaXMgY29uZmlndXJlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICBkZXZOYW1lID0gZGV2TmFtZS5zdWJzdHIoMCwgZGV2TmFtZS5pbmRleE9mKCdAJykpO1xuXG4gICAgICAgIGNvbnN0IGRldkNvbmZpZ0ZpbGUgPSBwYXRoLmpvaW4oYXBwLmNvbmZpZ1BhdGgsIGFwcC5jb25maWdOYW1lICsgJy4nICsgZGV2TmFtZSArICcuanNvbicpO1xuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGV2Q29uZmlnRmlsZSkpIHtcbiAgICAgICAgICAgIGFwcC5sb2coJ3dhcm4nLCBgRGV2ZWxvcGVyIHNwZWNpZmljIGNvbmZpZyBmaWxlIFwiJHtkZXZDb25maWdGaWxlfVwiIGRvZXMgbm90IGV4aXN0IGFuZCB3aWxsIHVzZSBkZWZhdWx0cy5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5jb25maWdMb2FkZXIucHJvdmlkZXIgPSBuZXcgSnNvbkNvbmZpZ1Byb3ZpZGVyKGRldkNvbmZpZ0ZpbGUpO1xuICAgICAgICByZXR1cm4gYXBwLmxvYWRDb25maWdfKCk7XG4gICAgfVxufTsiXX0=